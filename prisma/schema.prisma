generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model CinemaLocation {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  street      String
  city        String
  country     String
  locationUrl String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  rooms       CinemaRoom[]

  @@index([name])
}

model SpecialProperty {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  CinemaRoom   CinemaRoom? @relation(fields: [cinemaRoomId], references: [id])
  cinemaRoomId Int?

  @@index([name])
}

model Movie {
  id         Int       @id @default(autoincrement())
  name       String    @default("Movie")
  launchDate DateTime?
  posterURL  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Seat {
  id          Int           @id @default(autoincrement())
  number      Int           @default(0)
  column      String        @default("A")
  width       Int           @default(0)
  length      Int           @default(0)
  height      Int           @default(0)
  cinemaRoom  CinemaRoom    @relation(fields: [belongsTo], references: [id])
  belongsTo   Int
  x           Int           @default(0)
  y           Int           @default(0)
  z           Int           @default(0)
  isReserved  Boolean       @default(false)
  isBought    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Reservation Reservation[]
  Ticket      Ticket[]

  @@index([id])
}

model Reservation {
  id          Int      @id @default(autoincrement())
  seat        Seat     @relation(fields: [seatId], references: [id])
  seatId      Int
  isConfirmed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([id])
}

model Ticket {
  id        Int      @id @default(autoincrement())
  seat      Seat     @relation(fields: [seatId], references: [id])
  seatId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([id])
}

model CinemaRoom {
  id                Int               @id @default(autoincrement())
  name              String
  numberOfSeats     Int
  width             Int
  length            Int
  height            Int
  specialProperties SpecialProperty[]
  seats             Seat[]
  isAvailable       Boolean
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  CinemaLocation    CinemaLocation?   @relation(fields: [cinemaLocationId], references: [id])
  cinemaLocationId  Int?

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  role          Role          @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservations  Reservation[]
  tickets       Ticket[]
  Password      Password?
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
